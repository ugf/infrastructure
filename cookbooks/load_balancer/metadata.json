{
  "name": "load_balancer",
  "description": "Deploys the UGF software to the environment",
  "long_description": "",
  "maintainer": "Cloud Infrastructure",
  "maintainer_email": "csf@ultimatesoftware.com",
  "license": "our license",
  "platforms": {
    "ubuntu": ">= 0.0.0"
  },
  "dependencies": {
    "route53": ">= 0.0.0",
    "rightscale": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
    "route53/domain": {
      "display_name": "domain name",
      "description": "The domain name without the prefix (ie, globalincite.com)",
      "required": "optional",
      "recipes": [
        "load_balancer::configure_load_balancer_forwarding",
        "load_balancer::deregister_with_haproxy",
        "load_balancer::register_appserver_with_haproxy",
        "load_balancer::register_webserver_with_haproxy"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "route53/prefix": {
      "display_name": "prefix",
      "description": "The prefix to a domain (ie, www or api)",
      "required": "optional",
      "recipes": [
        "load_balancer::configure_load_balancer_forwarding",
        "load_balancer::disconnect_from_haproxy",
        "load_balancer::disconnect_instance_from_haproxy",
        "load_balancer::register_instance_with_haproxy",
        "load_balancer::register_with_haproxy"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "load_balancer/backend_name": {
      "display_name": "backend name",
      "description": "A unique name for each back end e.g. (RS_INSTANCE_UUID)",
      "required": "optional",
      "recipes": [
        "load_balancer::disconnect_from_haproxy",
        "load_balancer::register_with_haproxy"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "load_balancer/forwarding_ports": {
      "display_name": "forwarding ports",
      "description": "The list of ports to be forwarded by the load balancer (i.e. 80,81,82,443)",
      "required": "required",
      "recipes": [
        "load_balancer::configure_load_balancer_forwarding",
        "load_balancer::disconnect_instance_from_haproxy",
        "load_balancer::register_instance_with_haproxy"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "load_balancer/instance_backend_name": {
      "display_name": "instance backend name",
      "description": "instance backend name to be disconnected from haproxy",
      "required": "required",
      "recipes": [
        "load_balancer::disconnect_instance_from_haproxy",
        "load_balancer::register_instance_with_haproxy"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "load_balancer/instance_ip": {
      "display_name": "instance ip",
      "description": "instance ip to be registered with haproxy",
      "required": "required",
      "recipes": [
        "load_balancer::register_instance_with_haproxy"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "load_balancer/private_ssh_key": {
      "display_name": "private ssh key",
      "description": "The ssh key used to connect to the load balancer",
      "required": "optional",
      "recipes": [
        "load_balancer::register_appserver_with_haproxy"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "load_balancer/server_ip": {
      "display_name": "server ip",
      "required": "required",
      "recipes": [
        "load_balancer::register_with_haproxy"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "load_balancer/should_register_with_lb": {
      "display_name": "should register with load balancer",
      "description": "This environment uses loadbalancers (true/false)",
      "required": "optional",
      "default": "false",
      "recipes": [
        "load_balancer::disconnect_from_haproxy",
        "load_balancer::register_with_haproxy"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "load_balancer/ssl_certificate": {
      "display_name": "ssl certificate",
      "description": "The contents of the SSL Certificate which can be obtained from the 'mycert.crt' file.",
      "required": "required",
      "recipes": [
        "load_balancer::configure_load_balancer_forwarding"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "load_balancer/ssl_key": {
      "display_name": "ssl key",
      "description": "The contents of the SSL key file (key.pem) that's required for secure (https) connections.",
      "required": "required",
      "recipes": [
        "load_balancer::configure_load_balancer_forwarding"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "deploy/deployment_name": {
      "display_name": "deployment name",
      "required": "required",
      "recipes": [
        "load_balancer::deregister_with_haproxy",
        "load_balancer::register_with_haproxy"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    }
  },
  "groupings": {
  },
  "recipes": {
    "load_balancer::configure_load_balancer_forwarding": "Adds an entry vhost (frontend) that forwards requests to the next target",
    "load_balancer::disconnect_from_haproxy": "Disconnects from each load balancer",
    "load_balancer::disconnect_instance_from_haproxy": "Disconnects an instance from the haproxy",
    "load_balancer::register_instance_with_haproxy": "Registers an instance with haproxy",
    "load_balancer::register_with_haproxy": "Registers with each load balancer",
    "load_balancer::tag_lb_role": "Tags the load balancer role"
  },
  "version": "0.0.1"
}