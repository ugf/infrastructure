require 'fileutils'

s3_bucket = '<%= @s3_bucket %>'
s3_repository = '<%= @s3_repository %>'
product = '<%= @product %>'
version = '<%= @version %>'
target_directory = '<%= @target_directory %>'
install_files = '<%= @artifacts %>'.split(',')

if File.exist?("#{target_directory}/#{install_files[0]}.zip")
  puts "Found #{product} (#{version}) already on the system"
  exit
end

puts "downloading #{product} (#{version}) to #{target_directory}"

Dir.mkdir(target_directory) unless target_directory.empty? || File.exist?(target_directory)

if '<%= @repository_source %>' == 's3'
  require 'fog'

  storage = Fog::Storage.new(
    :provider => 'AWS',
    :aws_access_key_id => '<%= @aws_access_key_id %>',
    :aws_secret_access_key => '<%= @aws_secret_access_key %>'
  )

  s3_files = storage.directories.find { |d| d.key == s3_bucket }.files

  missing_files = []

  s3_path = "#{s3_repository}/#{product}/#{version}"

  install_files.each do |f|
    file = s3_files.get("#{s3_path}/#{f}.zip")
    if file.nil?
      missing_files << "#{s3_path}/#{f}.zip"
    else
      File.open("#{target_directory}/#{f}.zip", 'wb') do |local_file|
        local_file.write(file.body)
      end
    end
  end

  raise "could not find the following files: #{missing_files}" unless missing_files.empty?
else
  repository = "\\\\denver2\\Groups\\Build and Deployment\\newgen\\repository"
  `net use \\\\denver2 teamv /user:devcorp\\svc.tv`
  install_files.each do |f|
    `copy "#{repository}\\#{s3_bucket}\\#{s3_repository}\\#{product}\\#{version}\\#{f}.zip" #{target_directory}`
  end
end
